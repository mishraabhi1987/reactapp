{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactapp\\\\reactapp\\\\src\\\\components\\\\Moviesearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axio from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Moviesearch = () => {\n  _s();\n\n  const [moviedata, setmoviedata] = useState({\n    Actors: \"\",\n    Awards: \"\",\n    Country: \"\",\n    Director: \"\",\n    Genre: \"\",\n    Language: \"\",\n    Metascore: \"\",\n    Plot: \"\",\n    Poster: \"\",\n    Rated: \"\",\n    Ratings: [{\n      Source: \"\",\n      Value: \"\"\n    }],\n    Released: \"\",\n    Response: \"\",\n    Runtime: \"\",\n    Title: \"\",\n    Type: \"\",\n    Writer: \"\",\n    Year: \"\",\n    imdbID: \"\",\n    imdbRating: \"\",\n    imdbVotes: \"\",\n    totalSeasons: \"\"\n  });\n\n  async function getmoviedata() {\n    const res = await axio.get(\"http://www.omdbapi.com/?t=scam+1992&apikey=511b46e\");\n    setmoviedata(res);\n  }\n\n  getmoviedata();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), moviedata.map(val => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: val.Poster\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(Moviesearch, \"vO3dPOJMC117GeXN1wtPOEuz+gw=\");\n\n_c = Moviesearch;\nexport default Moviesearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moviesearch\");","map":{"version":3,"sources":["D:/reactapp/reactapp/src/components/Moviesearch.jsx"],"names":["React","useState","useEffect","axio","Moviesearch","moviedata","setmoviedata","Actors","Awards","Country","Director","Genre","Language","Metascore","Plot","Poster","Rated","Ratings","Source","Value","Released","Response","Runtime","Title","Type","Writer","Year","imdbID","imdbRating","imdbVotes","totalSeasons","getmoviedata","res","get","map","val"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,OAAjB;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CACtC;AACIM,IAAAA,MAAM,EAAE,EADZ;AAEIC,IAAAA,MAAM,EAAE,EAFZ;AAGIC,IAAAA,OAAO,EAAE,EAHb;AAIIC,IAAAA,QAAQ,EAAE,EAJd;AAKIC,IAAAA,KAAK,EAAE,EALX;AAMIC,IAAAA,QAAQ,EAAE,EANd;AAOIC,IAAAA,SAAS,EAAE,EAPf;AAQIC,IAAAA,IAAI,EAAE,EARV;AASIC,IAAAA,MAAM,EAAE,EATZ;AAUIC,IAAAA,KAAK,EAAE,EAVX;AAWIC,IAAAA,OAAO,EAAE,CAAC;AAACC,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,KAAK,EAAE;AAApB,KAAD,CAXb;AAYIC,IAAAA,QAAQ,EAAE,EAZd;AAaIC,IAAAA,QAAQ,EAAE,EAbd;AAcIC,IAAAA,OAAO,EAAE,EAdb;AAeIC,IAAAA,KAAK,EAAE,EAfX;AAgBIC,IAAAA,IAAI,EAAE,EAhBV;AAiBIC,IAAAA,MAAM,EAAE,EAjBZ;AAkBIC,IAAAA,IAAI,EAAE,EAlBV;AAmBIC,IAAAA,MAAM,EAAE,EAnBZ;AAoBIC,IAAAA,UAAU,EAAE,EApBhB;AAqBIC,IAAAA,SAAS,EAAE,EArBf;AAsBIC,IAAAA,YAAY,EAAE;AAtBlB,GADsC,CAA1C;;AA0BA,iBAAeC,YAAf,GAA6B;AACzB,UAAMC,GAAG,GAAG,MAAM7B,IAAI,CAAC8B,GAAL,CAAS,oDAAT,CAAlB;AACA3B,IAAAA,YAAY,CAAC0B,GAAD,CAAZ;AACH;;AACDD,EAAAA,YAAY;AACZ,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAEC1B,SAAS,CAAC6B,GAAV,CAAeC,GAAD,IAAS;AACpB,0BACA;AAAK,QAAA,GAAG,EAAEA,GAAG,CAACpB;AAAd;AAAA;AAAA;AAAA;AAAA,cADA;AAIH,KALA,CAFD;AAAA,kBADJ;AAYH,CA5CD;;GAAMX,W;;KAAAA,W;AA6CN,eAAeA,WAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport axio from 'axios';\r\n\r\nconst Moviesearch = () => {\r\n    const [moviedata, setmoviedata] = useState(\r\n        {\r\n            Actors: \"\",\r\n            Awards: \"\",\r\n            Country: \"\",\r\n            Director: \"\",\r\n            Genre: \"\",\r\n            Language: \"\",\r\n            Metascore: \"\",\r\n            Plot: \"\",\r\n            Poster: \"\",\r\n            Rated: \"\",\r\n            Ratings: [{Source: \"\", Value: \"\"}],\r\n            Released: \"\",\r\n            Response: \"\",\r\n            Runtime: \"\",\r\n            Title: \"\",\r\n            Type: \"\",\r\n            Writer: \"\",\r\n            Year: \"\",\r\n            imdbID: \"\",\r\n            imdbRating: \"\",\r\n            imdbVotes: \"\",\r\n            totalSeasons: \"\"\r\n        }\r\n    );\r\n    async function getmoviedata(){\r\n        const res = await axio.get(\"http://www.omdbapi.com/?t=scam+1992&apikey=511b46e\");\r\n        setmoviedata(res);\r\n    }\r\n    getmoviedata();\r\n    return(\r\n        <>\r\n        <h1>Movie Search</h1>\r\n        {moviedata.map((val) => {\r\n            return(\r\n            <img src={val.Poster} />\r\n        )\r\n\r\n        })}\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Moviesearch;\r\n\r\n"]},"metadata":{},"sourceType":"module"}